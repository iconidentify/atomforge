name: Release FDO API

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: FDO API ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## üöÄ FDO API Release ${{ steps.get_version.outputs.VERSION }}

            ### What's New
            - Complete HTTP REST API for FDO compilation
            - Docker container with Ada32.dll and Wine
            - Swagger UI documentation
            - Cross-platform compatibility

            ### Quick Start

            #### Option 1: Docker Run
            ```bash
            docker run -p 8000:8000 ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
            ```

            #### Option 2: Docker Compose
            ```yaml
            version: '3.8'
            services:
              fdo-api:
                image: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
                ports:
                  - "8000:8000"
            ```

            ### API Usage

            **Start the service:**
            ```bash
            docker run -p 8000:8000 ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
            ```

            **Compile FDO:**
            ```bash
            curl -X POST http://localhost:8000/compile \
              -H "Content-Type: application/json" \
              -d '{"source": "uni_start_stream <00x>\n  man_start_object <independent, \"Test\">\n  man_end_object <>\nman_end_stream <>"}' \
              --output compiled.fdo
            ```

            **API Documentation:**
            - Swagger UI: http://localhost:8000/
            - Health Check: http://localhost:8000/health

            ### Features
            - üîß FDO text to binary compilation
            - üåê REST API with JSON interface
            - üìÑ Interactive API documentation
            - ‚ö° Fast Wine-based execution
            - üîÑ Binary file responses

            ### Docker Image
            - **Registry**: `ghcr.io/${{ github.repository }}`
            - **Tag**: `${{ steps.get_version.outputs.VERSION }}`
            - **Size**: ~500MB (includes Wine + Ada32.dll)
            - **Platforms**: linux/amd64

            ### Requirements
            - Docker Engine
            - 1GB RAM minimum
            - Internet connection for initial download

            ---
            **Built from commit:** ${{ github.sha }}
          draft: false
          prerelease: false

  update-latest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          # Pull the image that was just built
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master

          # Tag it as latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Push the latest tag
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
