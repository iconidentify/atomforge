name: Deploy to Koyeb

on:
  push:
    branches: [ master ]
    paths:
      - 'api/**'
      - '.koyeb/**'
      - '.github/workflows/deploy-koyeb.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  KOYEB_PUBLIC_KEY: ${{ secrets.KOYEB_PUBLIC_KEY }}
  KOYEB_PRIVATE_KEY: ${{ secrets.KOYEB_PRIVATE_KEY }}
  KOYEB_APP_NAME: fdo-api-${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Koyeb CLI
        run: |
          curl -fsSL https://github.com/koyeb/koyeb-cli/releases/latest/download/install.sh | sh
          echo "$HOME/.koyeb/bin" >> $GITHUB_PATH

      - name: Authenticate with Koyeb
        run: |
          koyeb auth login --public-key "$KOYEB_PUBLIC_KEY" --private-key "$KOYEB_PRIVATE_KEY"

      - name: Check for existing service
        id: check-service
        run: |
          if koyeb services get "$KOYEB_APP_NAME" --output json > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Service $KOYEB_APP_NAME already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Service $KOYEB_APP_NAME does not exist, will create new one"
          fi

      - name: Deploy to existing Koyeb service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "üöÄ Deploying to existing Koyeb service: $KOYEB_APP_NAME"
          koyeb services redeploy "$KOYEB_APP_NAME" \
            --git github.com/${{ github.repository }} \
            --git-branch ${{ github.ref_name }} \
            --git-workdir api \
            --git-build-command "docker build -t fdo-api ." \
            --port 8000 \
            --public \
            --env PYTHONPATH=/app \
            --env LOG_LEVEL=INFO \
            --cpu 0.1 \
            --memory 512MB

      - name: Create new Koyeb service
        if: steps.check-service.outputs.exists == 'false'
        run: |
          echo "üÜï Creating new Koyeb service: $KOYEB_APP_NAME"
          koyeb services create "$KOYEB_APP_NAME" \
            --git github.com/${{ github.repository }} \
            --git-branch ${{ github.ref_name }} \
            --git-workdir api \
            --git-build-command "docker build -t fdo-api ." \
            --port 8000 \
            --public \
            --env PYTHONPATH=/app \
            --env LOG_LEVEL=INFO \
            --cpu 0.1 \
            --memory 512MB \
            --healthcheck-http-path /health \
            --healthcheck-http-port 8000

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Checking deployment status (attempt $attempt/$max_attempts)..."

            # Get service info
            service_info=$(koyeb services get "$KOYEB_APP_NAME" --output json 2>/dev/null)
            if [ $? -eq 0 ]; then
              # Extract public URL
              public_url=$(echo "$service_info" | grep -o '"public_domain":"[^"]*"' | cut -d'"' -f4)
              if [ -n "$public_url" ]; then
                echo "‚úÖ Deployment successful!"
                echo "üåê API available at: https://$public_url"
                echo "üìñ Swagger UI: https://$public_url/"
                echo "‚ù§Ô∏è Health Check: https://$public_url/health"
                exit 0
              fi
            fi

            echo "Deployment not ready yet, waiting 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done

          echo "‚ùå Deployment timeout after $max_attempts attempts"
          echo "üîç Check Koyeb dashboard for deployment status"
          koyeb services logs "$KOYEB_APP_NAME" --tail 50
          exit 1

      - name: Deployment Summary
        if: success()
        run: |
          echo "## üöÄ FDO API Deployed Successfully!"
          echo ""
          echo "### Service Details:"
          echo "- **Name**: $KOYEB_APP_NAME"
          echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}"
          echo "- **Branch**: ${{ github.ref_name }}"
          echo "- **Commit**: ${{ github.sha }}"
          echo ""
          echo "### API Endpoints:"
          echo "- **Base URL**: Check Koyeb dashboard for public domain"
          echo "- **Swagger UI**: /"
          echo "- **Health Check**: /health"
          echo "- **Compile FDO**: /compile (POST)"
          echo ""
          echo "### Usage Example:"
          echo '```bash'
          echo 'curl -X POST https://your-domain.koyeb.app/compile \'
          echo '  -H "Content-Type: application/json" \'
          echo '  -d '\''{"source": "uni_start_stream <00x>\\n  man_start_object <independent, \\"Test\\">\\n  man_end_object <>\\nman_end_stream <>"}'\'''
          echo '```'
          echo ""
          echo "### Next Steps:"
          echo "1. Visit Koyeb dashboard to get your public domain"
          echo "2. Test the API endpoints"
          echo "3. Share the API URL with users!"
          echo ""
          echo "üéâ Your FDO compilation API is now live on Koyeb!"
